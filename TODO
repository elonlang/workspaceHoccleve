==================
hocl.tk to-do list
==================

These are various things to do that don't fit well into issues on the tracker
(github.com/hoccleve-archive/hocl.tk). They aren't sorted in any way, but they
can be dated by looking at the output of `git blame` on this file. Also, various
source files may have TODOs in them: grep around for "TODO" to find them. I also
use "Note:" or "XXX" to mark areas of interest that might need more concern than
others.

To take advantage of version control, create a task, commit before completing
it, and when a task the taks is complete, mark it as done. Periodically remove
tasks which are complete to un-clutter the list.

Key to [ ] : X == Done, - == Won't do/Invalid

THINGS THAT ARE RELEVANT NOW
----------------------------

[ ] It would be good to have tests against the REST API run automatically on a
    `git push` and to 'deploy' to a test server (like hocl.tk/test) at the same
    time.

[X] The "sidebar" element in the TEI-poem HTML should present the class of the
    note in addition to the text of the note.

    [ ] In addition to that, some notes have an extra bit of description which
        modifies the class, but which is specific to the note. This is currently
        rendered in an unappealing manner (just the text is shown). It would be
        good to find a way to present that nicely.

    [ ] Related to the previous issue, we would like to encode some more
        information about the class of a note beyond the simple identifier we
        use now. There should be a way to elaborate using semantical TEI, but
        there's always tei:ab if it comes to that.

    [ ] One of the things which we'd like to describe about classes are the
        relationships between them: some classes are modifications of other
        classes. We'd like to store these either with the analysis document or
        in a separate TEI document

    [ ] so that such relationships can be used for querying, sorting, and
        aggregating.

[ ] Test against relax-ng schemata in Java.

[ ] The XSLTTransformer sub-classes generally don't include any functionality,
    so they can be represented in a simple object description like:
        
        `{"stylesheet": "do-something.xslt", "content-type": "text/plain"}`

    This description doesn't need to be a servlet on its own, but can just be a
    list of descriptions in XSLTTransformer.

    [ ] Following on the previous point, the XSLTTransformer class can be exposed as
        the base of a server like hocl.tk. Once it's possible to construct the classes
        from templates, it might make sense to separate XSLTTransformer (and the
        internal dependencies) and include it as a dependency of a hocl.tk composed
        mainly of the templates and the stylesheets.


THINGS THAT WOULD BE NICE BUT AREN'T ESSENTIAL
----------------------------------------------

- `tidy` HTML cleaner suggests adding a summary element to our HTML tables.
  Apparently it helps non-visual readers.

- Automated tests to make sure static documents match schema. Alternatively, a
  policy of manually checking them after changes are made, though not ideal, may
  be acceptable.

- Add our stylsheets to the TEI wiki:
  http://wiki.tei-c.org/index.php/Category:XSLT

- Set some project-wide variables in the configuration and use them in the
  code. For example: the location of our bug tracker or our project name.

- Using PrimeFaces (http://primefaces.org/) might work well for a server
  interface. I have mostly avoided JSP/Facelets in favor of Javascript.

- Enable CORS since we're running a public service.

THINGS WAY OFF IN THE FUTURE
----------------------------

- It would be interesting to handle partial documents. It's not yet obvious to
  me how to identify discontinuities in the poems using XSL or whether that
  information should be incoded in the TEI document itself.

  - Related to that, it would be nice to extract document parts to look at
    everything tied to a "type" in a concordance. You can do this with the demo
    at http://hocl.tk/html/concordance.html (also in
    https://github.com/hoccleve-archive/concordance-demo)

- We've discussed storage of documents in RDF triple stores or relational
  databases for storing documents. Ultimately, I opted to focus on a
  document-centric model where documents are pulled on-demand using HTTP. Working
  up-stream on generation of annotations, there is certainly an opportunity for
  storing CTables in an annotation database.

THINGS TO LOOK AT
-----------------

- (Not really a task) More expressive sorting and aggregation tools are missing
  from the initial concordance table demo created -- currently hosted at
  http://hocl.tk/html/concordance.html. A first step for exploring these
  capabilities would be plugging in the concordance table with the interactive
  poem

- There are quite a few stylesheets on the TEI Consortium's Github account:

      https://github.com/TEIC/Stylesheets/

  I didn't give attention to them because the stylesheets we have were simpler
  to write than it would have been to evaluate theirs. That said, some of the
  ones in that repository may be useful and worth trying out. Other TEI projects
  worth looking at:

  - For creating ODD (schema) files, LaTeX output, docx files, and Open
    Document Text files: http://wiki.tei-c.org/index.php/Tei-xsl

  - Web publishing application. Apparently only supports P4:
    http://omeka.org/codex/Documentation

- Marca (http://www.gomarca.com/) is a platform for organizing writing classes.
  It includes tools for composing and annotating documents and we have discussed
  integrating our tools with theirs. In particular being able to compose
  documents in Marca which could then be extracted as CTables for distribution
  could be helpful in displaying an analysis concisely.
